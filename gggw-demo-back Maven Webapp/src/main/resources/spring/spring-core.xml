<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd
	">
	
	<!-- 启用注解 -->
	<context:annotation-config />
	
	<!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
	<context:component-scan base-package="com.gggw">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<bean id="springContext" class="com.gggw.core.utils.SpringContext"></bean>
	
	
	<!-- 
		为了代替手动使用SqlSessionDaoSupport或SqlSessionTemplate，
		MyBatis-Spring提供了一个动态代理的实现，即MapperFactoryBean，
		从而直接注入数据映射器到Service层bean中，MapperFactoryBean负责处理SqlSession的创建和关闭，
		使用了Spring事务后，事务完成时，session将会提交或者回滚。
	
		1.创建jdbc数据源 
		<bean id="dataSource" class="com.cairh.xpe.context.jdbc.DynaCachedDataSource" />

		2.创建SqlSessionFactory，同时指定数据源
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource" />
		</bean>
	
		3.bean注入
		   注意,没有必要去指定SqlSessionFactory或SqlSessionTemplate, 
		    因为MapperScannerConfigurer将会创建 MapperFactoryBean，之后自动装配。
		    但是，如果你使 用了一个以上的DataSource，那 么自动装配可能会失效。
		    这种情况下,你可以使用 sqlSessionFactoryBeanName或sqlSessionTemplateBeanName 
		    属性来设置正确的 bean名称来使用
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<property name="basePackage" value="com.cairh.xpe.**.dao"/>
			<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		</bean>
	 -->
	
	<!-- ================ sql TransactionManager start  ================ -->	 
	<!-- 读取配置文件 -->
	<bean id="propertyConfigurer" class="com.gggw.core.utils.SystemPropertyBasedPlaceholderConfigurer">  
        <property name="ignoreResourceNotFound" value="true" />
        <!--  通过文件读取 -->
		<property name="fileLocations">
			<list>
				<value>/db/db.properties</value>
			</list>
		</property>
	</bean>  
		
	<!-- 阿里 druid数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
         <!-- 数据库基本信息配置 -->
         <property name="url" value="${db.url}" />  
         <property name="username" value="${db.username}" />  
         <property name="password" value="${db.password}" />  
         <property name="driverClassName" value="${db.driverClassName}" />  
         <property name="filters" value="${db.filters}" />  
   		 <!-- 最大并发连接数 -->
         <property name="maxActive" value="${db.maxActive}" />
         <!-- 初始化连接数量 -->
         <property name="initialSize" value="${db.initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name="maxWait" value="${db.maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name="minIdle" value="${db.minIdle}" />  
   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}" />  
         <property name="validationQuery" value="${db.validationQuery}" />  
         <property name="testWhileIdle" value="${db.testWhileIdle}" />  
         <property name="testOnBorrow" value="${db.testOnBorrow}" />  
         <property name="testOnReturn" value="${db.testOnReturn}" />  
         <property name="maxOpenPreparedStatements" value="${db.maxOpenPreparedStatements}" />
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="${db.removeAbandoned}" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="${db.removeAbandonedTimeout}" />
         <!-- 关闭abanded连接时输出错误日志 -->   
         <property name="logAbandoned" value="${db.logAbandoned}" />
	</bean>  
	
	<!-- 事务管理 -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">   
    	<property name="dataSource" ref="dataSource"></property>
 	</bean>
 	
 	<!-- 配置mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
        <!-- mapper扫描 -->
        <property name="mapperLocations" value="classpath:mybatis/*/*.xml"></property>
    </bean>
    
    <!-- 存疑 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 事物处理 -->
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.gggw.service..*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>
	
	
	<!-- ================ sql TransactionManager end ================ -->
	
	
	
	<!-- ================ Shiro start ================ -->
	  	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
			<property name="realm" ref="ShiroRealm" />
		</bean>
		
		<!-- 項目自定义的Realm -->
	    <bean id="ShiroRealm" class="com.gggw.interceptor.shiro.ShiroRealm" ></bean>
		
		<!-- Shiro Filter -->
	 	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
			<property name="securityManager" ref="securityManager" />
			
			<property name="loginUrl" value="/" />
			
			<property name="successUrl" value="/main/index" />
			
			<property name="unauthorizedUrl" value="/login_toLogin" />
			
			<property name="filterChainDefinitions">
				<value>
				/static/login/** 			= anon
				/static/js/myjs/** 			= authc
				/static/js/** 				= anon
				/uploadFiles/uploadImgs/** 	= anon
	           	/code.do 					= anon
	           	/login_login	 			= anon
	           	/app**/** 					= anon
	           	/weixin/** 					= anon
	           	/**							= authc
				</value>
			</property>
		</bean>
	<!-- ================ Shiro end ================ -->
	
	<!--  文件注入的方式
   	<bean id="PropertiesUtils" class="com.gggw.util.PropertiesUtils">
		<property name="fileList">
			<list>
				<value>/interface/interface_config.properties</value>
			</list>
		</property>
	</bean>-->
</beans>